package comp3111.covid;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.DateCell;
import javafx.scene.control.Tab;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.DatePicker;
import javafx.scene.control.CheckBox;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.Label;

import org.apache.commons.csv.CSVRecord;
import org.controlsfx.control.CheckComboBox;
import edu.duke.FileResource;
import java.net.URL;
import java.util.ResourceBundle;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;


/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by SceneBuilder 
 */
public class Controller implements Initializable{
    @FXML
    private Label titleA1;
    
    @FXML
    private TableColumn<countryA1, String> colCountry1A;

    @FXML
    private TableColumn<countryA1, Long> colTotalCases;

    @FXML
    private TableColumn<countryA1, Double> colTotalCases1M;
    
    @FXML
    private TableView<countryA1> tableA1;
    
	@FXML
    private DatePicker EndDatePickerA2;
	
	@FXML
    private TextArea PreviewSelectedCountriesBoxA2;
	
	@FXML
    private Button PreviewSelectedCountriesButtonA2;

    @FXML
    private DatePicker StartDatePickerA2;

    @FXML
    private Button buttonConfirmedCaseChart;
    
    @FXML
    private Button PreviewSelectedCountriesButtonA1;

    @FXML
    private TextArea PreviewSelectedCountriesBoxA1;
    
    @FXML
    private DatePicker DatePickerA1;
	
    @FXML
    private Button buttonConfirmedCaseTable;
    
    @FXML
    private CheckComboBox<String> checkComboBoxA1;
    
    @FXML
    private CheckComboBox<String> checkComboBoxA2;
	
    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldISO;

    @FXML
    private Button buttonConfirmedDeaths;

    @FXML
    private TextField textfieldDataset;

    @FXML
    private Button buttonRateOfVaccination;

    @FXML
    private Button buttonConfirmedCases;

    @FXML
    private Tab tabReport1;

    @FXML
    private Tab tabReport2;

    @FXML
    private Tab tabReport3;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;

  

    /**
     *  Task Zero
     *  To be triggered by the "Confirmed Cases" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doConfirmedCases(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getConfirmedCases(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Confirmed Deaths" button on the Task Zero Tab
     *  
     */
    @FXML
    void doConfirmedDeaths(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getConfirmedDeaths(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rate of Vaccination" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRateOfVaccination(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getRateOfVaccination(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }  
    /**
     * initialize button
     * 
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
    	// Task A
			// create a country list
				String Dataset = textfieldDataset.getText();
				final ObservableList<String> CountryList = FXCollections.observableArrayList();
				FileResource fr = new FileResource("dataset/" + Dataset);
		
				for (CSVRecord rec : fr.getCSVParser(true)) {
					String location = rec.get("location");
					if (!CountryList.contains(location)) {
						CountryList.add(location);
					}
				}
				checkComboBoxA1.getItems().addAll(CountryList);
				checkComboBoxA2.getItems().addAll(CountryList);
			
			// set the valid date input between Mar 1, 2020 and July 20, 2021
				LocalDate minDate = LocalDate.of(2020, 3, 1);
				LocalDate maxDate = LocalDate.of(2021, 7, 20);
				DatePickerA1.setDayCellFactory(d ->
				           new DateCell() {
				               @Override public void updateItem(LocalDate item, boolean empty) {
				                   super.updateItem(item, empty);
				                   setDisable(item.isAfter(maxDate) || item.isBefore(minDate));
				               }});
				DatePickerA1.setValue(minDate);
				StartDatePickerA2.setDayCellFactory(d ->
		           new DateCell() {
		               @Override public void updateItem(LocalDate item, boolean empty) {
		                   super.updateItem(item, empty);
		                   setDisable(item.isAfter(maxDate.plusDays(-1)) || item.isBefore(minDate));
		               }});
				StartDatePickerA2.setValue(minDate);
				EndDatePickerA2.setDayCellFactory(d ->
		           new DateCell() {
		               @Override public void updateItem(LocalDate item, boolean empty) {
		                   super.updateItem(item, empty);
		                   setDisable(item.isAfter(maxDate) || item.isBefore(minDate.plusDays(1)));
		               }});
				EndDatePickerA2.setValue(minDate.plusDays(1));
		
    }
    
    
    // Task A1
	    @FXML
	    void doPreviewSelectedCountriesA1(ActionEvent event) {
	    	ObservableList<String> list = checkComboBoxA1.getCheckModel().getCheckedItems();
	    	String oReport = "";
	    	for (Object obj: list) {
	    		oReport += String.format("%s\n", obj);
	    	}
	    	PreviewSelectedCountriesBoxA1.setText(oReport);
	    }
	    
	    @FXML
	    void doConfirmedCaseTable(ActionEvent event) {
	    	// get input
	    	ObservableList<String> list = checkComboBoxA1.getCheckModel().getCheckedItems();
	    	LocalDate intersetedDate = DatePickerA1.getValue();
	    	String FormattedDate = intersetedDate.format(DateTimeFormatter.ofPattern("M/d/yyyy"));
	    	String dataset = textfieldDataset.getText();
	    	
	    	// not selected any country
	    	if (list.isEmpty()) {
	    		textAreaConsole.setText("Please select country of interest!");
	    		return;
	    	}
	    	
	    	String oReport = TaskA.generateTableA1(textfieldDataset.getText(), list, FormattedDate);
			textAreaConsole.setText(oReport);
			
			try {
			FXMLLoader loader = new FXMLLoader();
	    	loader.setLocation(getClass().getResource("/TableA1.fxml"));
	    	// Set this controller instance
	        loader.setController(this);
	   		VBox root = (VBox) loader.load();
	   		Stage stage = new Stage();
	   		Scene scene =  new Scene(root);
	   		stage.setScene(scene);
	   		stage.setTitle("Table A1");
	   		stage.show();
	   		} catch(Exception e) {
	   			textAreaConsole.setText("Error");
				return;
			}
			
			ObservableList<countryA1> tableList = FXCollections.observableArrayList();
			for (String obj: list) {
	    		oReport += String.format("%s\n", obj);
	    		tableList.add(new countryA1(dataset, obj, FormattedDate));
	    	}
			System.out.print(tableList.isEmpty()+"\n");
			for (countryA1 obj:tableList) {
				System.out.print(obj.location+"\n");
				System.out.print(obj.noOfTotalCases+"\n");
				System.out.print(obj.noOfTotalCasesPer1M+"\n");
			}
			
			this.titleA1.setText(String.format("Number of Confirmed COVID-19 Cases as of %s", intersetedDate));
			System.out.print("ok1\n");
			this.colCountry1A.setCellValueFactory(new PropertyValueFactory<countryA1, String>("location"));
			System.out.print("ok2\n");
			this.colTotalCases.setCellValueFactory(new PropertyValueFactory<countryA1, Long>("noOfTotalCases"));
			System.out.print("ok3\n");
			this.colTotalCases1M.setCellValueFactory(new PropertyValueFactory<countryA1, Double>("noOfTotalCasesPer1M"));
			System.out.print("ok4\n");
			tableA1.setItems(tableList);
			System.out.print("ok5\n");
			
	    }
    
    // Task A2
	     
	    @FXML
	    void doPreviewSelectedCountriesA2(ActionEvent event) {
	    	ObservableList<String> list = checkComboBoxA2.getCheckModel().getCheckedItems();
	    	String oReport = "";
	    	for (Object obj: list) {
	    		oReport += String.format("%s\n", obj);
	    	}
	    	PreviewSelectedCountriesBoxA2.setText(oReport);
	    }
	    
	    @FXML
	    void doRestrictDateA2(ActionEvent event) {
	    	// set the valid date input between Mar 1, 2020 and July 20, 2021
			LocalDate minDate = StartDatePickerA2.getValue();
			LocalDate maxDate = LocalDate.of(2021, 7, 20);
			EndDatePickerA2.setDayCellFactory(d ->
			           new DateCell() {
			               @Override public void updateItem(LocalDate item, boolean empty) {
			                   super.updateItem(item, empty);
			                   setDisable(item.isAfter(maxDate) || item.isBefore(minDate.plusDays(1)));
			               }});
			if(EndDatePickerA2.getValue().isBefore(minDate.plusDays(1))) {
				EndDatePickerA2.setValue(minDate.plusDays(1));
			}
	    }
	    
	    @FXML
	    void doConfirmedCaseChart(ActionEvent event) {
	    	// get input
	    	ObservableList<String> list = checkComboBoxA2.getCheckModel().getCheckedItems();
	    	LocalDate StartingDate = StartDatePickerA2.getValue();
	    	LocalDate EndingDate = EndDatePickerA2.getValue();
	    	String StartFormattedDate = StartingDate.format(DateTimeFormatter.ofPattern("M/d/yyyy"));
	    	String EndFormattedDate = EndingDate.format(DateTimeFormatter.ofPattern("M/d/yyyy"));
	    	
	    	// not selected any country
	    	if (list.isEmpty()) {
	    		textAreaConsole.setText("Please select country of interest!");
	    		return;
	    	}
	    		    	
	    	String oReport = TaskA.generateChartA2(textfieldDataset.getText(), list, StartFormattedDate, EndFormattedDate);
	    	textAreaConsole.setText(oReport);
	    }
}

